package binary_trees;
import java.util.*;
import java.util.Scanner;

public class binarytreeuse {
	public static binarytreenode<Integer> takeinputiteratively(Scanner sc) {
		int rootele;
		System.out.println("please enter the root");
		 rootele=sc.nextInt();
		 binarytreenode<Integer> root=new binarytreenode<Integer>(rootele);
		Queue<binarytreenode<Integer>> pqueue=new LinkedList<>();
		pqueue.add(root);
		while(!pqueue.isEmpty()){
			binarytreenode<Integer> frontnode=pqueue.remove();
			System.out.println("please enter the left node data");
			int left=sc.nextInt();
			if(left==-1) {
				frontnode.left=null;
			}else {
			frontnode.left.data=left;
			pqueue.add(frontnode.left);
			
			}
		
		System.out.println("please enter the right node data");
		int right=sc.nextInt();
		if(right==-1) {
			frontnode.right=null;
		}else {
			frontnode.right.data=left;
			pqueue.add(frontnode.right);
		}
		
	}
		return root;
		
		
	}
	public static void print(binarytreenode<Integer> root) {
		 if(root==null) {
			 return;
		 }
		 String res=root.data+"";
		 if(root.left != null) {
			res+="L:"+root.left.data+",";
		 }
		 if(root.right!=null) {
			 res+="R:"+root.right.data+",";
		 }
		 System.out.println(res);
		print(root.left);
		print(root.right);
	}
    public static binarytreenode<Integer> takeinput(Scanner sc) {
    	int n;
    	System.out.println("please enter the root ");
    	   n=sc.nextInt();
    	 if(n==-1) {
    		return null;
    	 }
    	binarytreenode<Integer> root=new binarytreenode<Integer>(n);
    	root.left=takeinput(sc);
    	root.right=takeinput(sc);
    	 return root;
    	 
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
				
		Scanner sc=new Scanner(System.in);
		binarytreenode<Integer> root=takeinputiteratively(sc);
		//binarytreenode<Integer> root=takeinput( sc);
		print(root);
	}

}
