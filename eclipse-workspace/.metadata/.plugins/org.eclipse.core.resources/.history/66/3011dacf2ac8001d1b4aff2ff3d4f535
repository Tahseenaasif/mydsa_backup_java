package binary_trees;
import java.util.*;
import java.util.Scanner;

public class binarytreeuse { 
	public static balancetreereturn isbalanceopt(binarytreenode<Integer>root){
		if(root==null) {
			int height=0;
			boolean isbalance=true;
			balancetreereturn  ans=new balancetreereturn();
			ans.height=0;
			ans.isbalance=true;
			return ans;
		}
		balancetreereturn leftnode=isbalanceopt(root.left);
		balancetreereturn rightnode=isbalanceopt(root.right);
		int height=1+Math.max(leftnode.height,rightnode.height);
		boolean isbal=true;
		 if(Math.abs(leftnode.height-rightnode.height)>1) {
			 isbal=false;
		 }
		 if(!leftnode.isbalance  ||!rightnode.isbalance) {
			 isbal =false;
		 }
		 balancetreereturn ans=new balancetreereturn();
		 ans.height=height;
		 ans.isbalance=isbal;
		 return ans;
		
	}
	public  static  boolean isblance(binarytreenode<Integer>root ){
		if(root==null){
			return true;
		} 
		  boolean ans=true;
		int  ans1=height(root.left);
	    int   ans2=height(root.right);
	      if(Math.abs(ans1-ans2)>1) {
	    	  return false;
	      }
//	      ans=isblance(root);
//	      if(ans==false) {
//		    	return false;
//		    }
	   boolean  ansl= isblance(root.left );
//	    if(ans==false) {
//	    	return false;
//	    }
	   boolean ansr=isblance(root.right);
//	    if(ans==false) {
//	    	return false;
//	    }
	    return ansr && ansl;
	}
	
	
	public static int height(binarytreenode<Integer> root){
		  if(root==null) {
			  return 0;
		  }
		  return Math.max(height(root.left),height(root.right))+1;
	}
	
	
	public static binarytreenode<Integer> removeleafnode(binarytreenode<Integer>root){
		if(root==null) {
			return null;
		}
		if(root.left==null || root.right==null){
			return null;
		}
		
		root.left= removeleafnode(root.left);
		root.right=removeleafnode(root.right);
		
		return root;
		
	}
	public static void printatk(binarytreenode<Integer>root,int k) {
		  if(root==null){
			    return;
		  }
		  if(k==0){
			System.out.println(root.data);  
		  }
		  printatk(root.left,k-1);
		  printatk(root.right,k-1);
	}
	public static binarytreenode<Integer> takeinputiteratively(Scanner sc) {
		int rootele;
		System.out.println("please enter the root");
		 rootele=sc.nextInt();
		 
		 binarytreenode<Integer> root=new binarytreenode<Integer>(rootele);
		Queue<binarytreenode<Integer>> pqueue=new LinkedList<>();
		pqueue.add(root);
		
		while(!pqueue.isEmpty()){
			binarytreenode<Integer> frontnode=pqueue.remove();
			System.out.println("please enter the left node data of : "+frontnode.data);
			int leftdata=sc.nextInt();
			if(leftdata!=-1) {
				 binarytreenode<Integer> left=new binarytreenode<Integer>(leftdata);
				 frontnode.left=left;
				 pqueue.add(left);
			}
		
			System.out.println("please enter the right node data of : "+frontnode.data);
			int rightdata=sc.nextInt();
			if(rightdata!=-1) {
				 binarytreenode<Integer> right=new binarytreenode<Integer>(rightdata);
				 frontnode.right=right;
				 pqueue.add(right);
			}
		
		
	}
		return root;
		
		
	}
	public static void print(binarytreenode<Integer> root) {
		 if(root==null) {
			 return;
		 }
		 String res=root.data+"";
		 if(root.left != null) {
			res+="L:"+root.left.data+",";
		 }
		 if(root.right!=null) {
			 res+="R:"+root.right.data+",";
		 }
		 System.out.println(res);
		print(root.left);
		print(root.right);
	}
    public static binarytreenode<Integer> takeinput(Scanner sc) {
    	int n;
    	System.out.println("please enter the root ");
    	   n=sc.nextInt();
    	 if(n==-1) {
    		return null;
    	 }
    	binarytreenode<Integer> root=new binarytreenode<Integer>(n);
    	root.left=takeinput(sc);
    	root.right=takeinput(sc);
    	 return root;
    	 
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
				
		Scanner sc=new Scanner(System.in);
		binarytreenode<Integer> root=takeinputiteratively(sc);
		//binarytreenode<Integer> root=takeinput( sc);
		print(root);
	//	printatk(root,2);
		//binarytreenode<Integer> roott= removeleafnode(root);
	//	print(roott);
		boolean ans=isblance(root);
		System.out.println(ans);
		System.out.println(isbalanceopt(root));
	}

}
